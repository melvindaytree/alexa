// --------------- Helpers that build all of the responses -----------------------
function buildSpeechletResponse(title, output, repromptText, shouldEndSession) {
    return {
        outputSpeech: {
            type: 'PlainText',
            text: output,
        },
        card: {
            type: 'Simple',
            title: `SessionSpeechlet - ${title}`,
            content: `SessionSpeechlet - ${output}`,
        },
        reprompt: {
            outputSpeech: {
                type: 'PlainText',
                text: repromptText,
            },
        },
        shouldEndSession,
    };
}
function buildResponse(sessionAttributes, speechletResponse) {
    return {
        version: '1.0',
        sessionAttributes,
        response: speechletResponse,
    };
}
// ---------------

// --------------- Data ---------------------------------
var irishFacts = 
[
  {
    "name": "Tír na nÓg",
    "fact": "Teer na Nogue is a mythical land, roughly translated as Country of the Young where everyone had eternal life. Oisin visited it after falling in love with Niamh.",
  },
  {
    "name": "Fionn Mac Cumhaill",
    "fact": "Fionn Mac Cool was a legendary warrior, leader of the Fianna. In some stories he is giant and was who built the Giant's Causeway in Northern Ireland",
  },{
    "name": "Medb",
    "fact": "Maeve was a Queen of Connacht and enemy of Conchubhar mac Nessa of Ulster. She is one of the main protaginists in the epic Táin Bó Cúailnge.",
  }
];

var irishStories = 
[
  {
    "name": "The Pursuit of Diarmuid and Gráinne",
    "story": "The Pursuit of Diarmuid and Gráinne also known as Toraíocht Diarmuid is Gráinne. Long ago a warrior named Diarmuid fell in love with the fiance of his leader, the legendary Fionn MacCool. They eloped and were chased in many amazing adventures. Diarmuid ends up dead of course!",
  }
];

// --------------- Events -----------------------
/**
 * Called when the session starts.
 */
function onSessionStarted(sessionStartedRequest, session) {
    console.log(`onSessionStarted requestId=${sessionStartedRequest.requestId}, sessionId=${session.sessionId}`);
}
/**
 * Called when the user launches the skill without specifying what they want.
 */
function onLaunch(launchRequest, session, callback) {
    console.log(`onLaunch requestId=${launchRequest.requestId}, sessionId=${session.sessionId}`);
// Dispatch to your skill's launch.
    getWelcomeResponse(callback);
}

function getWelcomeResponse(callback) {
    /* If we wanted to initialize the session to have some attributes we could add those here.*/
    const sessionAttributes = {};
    const cardTitle = 'Welcome';
    const speechOutput = 'Welcome to Irish Mythology, you can say: Tell me a fact or Tell me a story' ;
    /* If the user either does not reply to the welcome message or says something that is not understood, they will be prompted again with this text.*/
    const repromptText = 'You can say: Tell me a fact or Tell me a story ' ;
    const shouldEndSession = false;
callback(sessionAttributes,
        buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
}

/**
 * Called when the user specifies an intent for this skill.
 */
function onIntent(intentRequest, session, callback) {
    console.log(`onIntent requestId=${intentRequest.requestId}, sessionId=${session.sessionId}`);
const intent = intentRequest.intent;
    const intentName = intentRequest.intent.name;
// Dispatch to your skill's intent handlers
    if (intentName === 'AMAZON.HelpIntent') {
        getWelcomeResponse(callback);
    } else if (intentName === 'AMAZON.StopIntent') {
        handleSessionEndRequest(callback);
    } else if (intentName === 'Fact') {
        getFactResponse(callback);
    } else if (intentName === 'Story') {
        getStoryResponse(callback);
    }
}

function handleSessionEndRequest(callback) {
    const cardTitle = 'Session Ended';
    const speechOutput = 'Thank you for using the Irish Mythology Skill, have a great day!';
    // Setting this to true ends the session and exits the skill.
    const shouldEndSession = true;
callback({}, buildSpeechletResponse(cardTitle, speechOutput, null, shouldEndSession));
}

function getFactResponse(callback) {
    
    //get random index from array of data
    var index = getRandomInt(Object.keys(irishFacts).length -1);
    
    // If we wanted to initialize the session to have some attributes we could add those here.
    const sessionAttributes = {};
    
    //Get card title from data
    const cardTitle = irishFacts[index].name;
    
    //Get output from data
    const speechOutput = irishFacts[index].fact;
    // If the user either does not reply to the welcome message or says something that is not
    // understood, they will be prompted again with this text.
    const repromptText = '' ;
    const shouldEndSession = false;
callback(sessionAttributes,
        buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
}

function getRandomInt(max) {
    return Math.floor(Math.random() * (max - 0 + 1)) + 0;
}

function getStoryResponse(callback) {
    
    //get random index from array of data
    var index = getRandomInt(Object.keys(irishStories).length -1);
    
    // If we wanted to initialize the session to have some attributes we could add those here.
    const sessionAttributes = {};
    
    //Get card title from data
    const cardTitle = irishStories[index].name;
    
    //Get output from data
    const speechOutput = irishStories[index].story;
    // If the user either does not reply to the welcome message or says something that is not
    // understood, they will be prompted again with this text.
    const repromptText = '' ;
    const shouldEndSession = false;
callback(sessionAttributes,
        buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
}

/**
 * Called when the user ends the session.
 * Is not called when the skill returns shouldEndSession=true.
 */
function onSessionEnded(sessionEndedRequest, session) {
    console.log(`onSessionEnded requestId=${sessionEndedRequest.requestId}, sessionId=${session.sessionId}`);
    // Add cleanup logic here
}
// --------------- Main handler -----------------------
// Route the incoming request based on type (LaunchRequest, IntentRequest,
// etc.) The JSON body of the request is provided in the event parameter.
exports.handler = (event, context, callback) => {
    try {
        console.log(`event.session.application.applicationId=${event.session.application.applicationId}`);
/**
         * Uncomment this if statement and populate with your skill's application ID to
         * prevent someone else from configuring a skill that sends requests to this function.
         */
        /*
        if (event.session.application.applicationId !== 'amzn1.echo-sdk-ams.app.[unique-value-here]') {
             callback('Invalid Application ID');
        }
        */
if (event.session.new) {
            onSessionStarted({ requestId: event.request.requestId }, event.session);
        }
if (event.request.type === 'LaunchRequest') {
            onLaunch(event.request,
                event.session,
                (sessionAttributes, speechletResponse) => {
                    callback(null, buildResponse(sessionAttributes, speechletResponse));
                });
        } else if (event.request.type === 'IntentRequest') {
            onIntent(event.request,
                event.session,
                (sessionAttributes, speechletResponse) => {
                    callback(null, buildResponse(sessionAttributes, speechletResponse));
                });
        } else if (event.request.type === 'SessionEndedRequest') {
            onSessionEnded(event.request, event.session);
            callback();
        }
    } catch (err) {
        callback(err);
    }
};
